---
### - DOKUMENTATION - BEGIN --- ###
# Dieses Playbook beschreibt die Installation von Spectrum-Scale auf drei 
# virtuellen Maschinen und vereinfachen bzw. automatisieren die Installation von SPS
# Author: Patrick Jahn
# Date: 04.06.2020
# 
# Voraussetzungen:
# - Internet der SPS-Nodes
# - NFS-Server läuft und stellt folgendes bereit:
#   - ISO-Images von CentOS-Mirror (CentOS-7-x86_64-DVD-1908.iso)
#   - Kickstart-Config-Files zur automatisierten Installation/Konfiguration von CentOS (nfs:nas.home.local:/volume1/nfs-iso/kickstart-configs/sps1.cfg)
# - Drei virtuelle Maschinen wurden mit Terraform aufgesetzt
#   - CentOS 7.7.1908
#   - 4vCPU, 
#   - 16GB RAM, 
#   - 120GB root-disk, 
#   - 200GB NSD-Disk
# - DNS:
#   - sps1.home.local > 10.0.249.241 # Spectrum-Scale-Node#1
#   - sps2.home.local > 10.0.249.242 # Spectrum-Scale-Node#2
#   - sps3.home.local > 10.0.249.243 # Spectrum-Scale-Node#3
#   - sps.home.local > 10.0.249.245 # MMCES-NFS-Exported-IP
# - Die Netzwerk-Einstellungen (DNS, IP, Subnetz, Gateway) werden automatisch über DHCP (DNSMASQ) gesetzt
# - Die Installation von CentOS erfolgt über PXE und kickstart-config-file
# PXE-TFTP-Config-File-Folder: /home/tftproot/rootdir/tftpboot/pxelinux.cfg/
#   01-00-50-56-a6-ff-fd
#   01-00-50-56-a6-ff-fe
#   01-00-50-56-a6-ff-ff
# cat 01-00-50-56-a6-ff-fd
## Der Dateiname enthält die MAC-Adresse der VM. Somit bezieht jeder Server sein Image und seine Kickstart-Config
### - BEGIN - PXE-CONFIG-FILE ###
#DEFAULT menu.c32
#PROMPT 0
#MENU TITLE Spectrum-Scale-Install-Menu
#MENU AUTOBOOT Starting CentOS in # seconds
#timeout 18
#ONTIMEOUT centOS
#LABEL centOS
#menu label Add Spectrum-Scale-Node#1 Node
#kernel kernels_initrd/centos_7.7.1908/vmlinuz
#append ip=dhcp initrd=kernels_initrd/centos_7.7.1908/initrd.img inst.repo=nfs:nas.home.local:/volume1/nfs-iso/downloaded-iso/linux/CentOS-7-x86_64-DVD-1908.iso inst.ks=nfs:nas.home.local:/volume1/nfs-iso/kickstart-configs/sps1.cfg
### - END - PXE-CONFIG-FILE ###

# Output-Kickstart-Config symbolisch von einem Node
# - Bei weiteren Nodes sollte der Hostname geändert werden, der beim Installieren vergeben wird.
#[root@pxe-server pxelinux.cfg]# cat /mnt/iso/kickstart-configs/sps1.cfg
### - BEGIN KICKSTART-FILE ###
#version=DEVEL
# System authorization information
#auth --enableshadow --passalgo=sha512
# Use graphical install
#graphical
## Use NFS installation media
## NFS-Server-Name und Pfad muss angepasst werden !!!
#nfs --server=nas.home.local --dir=/volume1/nfs-iso/downloaded-iso/linux/CentOS-7-x86_64-DVD-1908.iso
## Run the Setup Agent on first boot
#firstboot --enable
#ignoredisk --only-use=sda
## Keyboard layouts
#keyboard --vckeymap=de-nodeadkeys --xlayouts='de (nodeadkeys)'
## System language
#lang de_DE.UTF-8

## Network information
#network  --bootproto=dhcp --device=ens192 --ipv6=auto --activate
## Hostname muss angepasst werden !!!
#network  --hostname=sps1.home.local

## Root password
#rootpw --iscrypted $6$fT64SdqzocRzC9or$8rlvIqfSUsDzO9WwE8i0MLspyoYZVkIOyot1HyIWwFHyr6z1EIq3jNZ94UUUpa9OitspjylBMciRQEdJrSPiZ/
## System services
#services --enabled="chronyd"
## System timezone
## Zeitserver muss angepasst werden !!!
#timezone Europe/Berlin --isUtc --ntpservers=router.home.local
## System bootloader configuration
#bootloader --location=mbr --boot-drive=sda
#autopart --type=lvm
## Partition clearing information
#clearpart --none --initlabel

#%packages
#@^minimal
#@core
#chrony

#%end

#%addon com_redhat_kdump --disable --reserve-mb='auto'

#%end

#%anaconda
#pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
#pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
#pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
#%end
#eula --agreed
#reboot
### - END KICKSTART-FILE ###
### - DOKUMENTATION - BEGIN --- ###

### --- BEGIN ANSIBLE-SKRIPT --- ###
- name: Voraussetzungen fuer Spectrum-Scale installieren
  hosts: spectrumscale
  gather_facts: false
  vars:
    spectrumscale_cmd: "/usr/lpp/mmfs/5.0.5.0/installer/spectrumscale"
    sps_node1: "sps1.home.local"
    sps_node2: "sps2.home.local"
    sps_node3: "sps3.home.local"
    sps_filesystem1: "/ibm/gpfs/"
    entpack_dir: "/opt/sva/spectrumscale/"
    entpack_tar_file: "Scale_std_install-5.0.5.0_x86_64.tar.gz"
    src_nas_mount: "nas.home.local:/volume1/nfs-iso/"
    dest_nas_mount_path: "/mnt"
    zone: public
    #ftp: 21/tcp
    #dns: 53/udp
  # Hier beginnen Tasks für das erste Play
  tasks:
    # Dies ist der erste Task

### Prerequisites für GPFS installieren

# Füge das EPEL-Release-Repo hinzu
# - Dies wird für die herunterzuladenen Vorausetzungen für SPS verwendet
    - name: "Add EPEL-Release-Repo"
      yum:
        name: epel-release.noarch
        state: present

# Die "Bind-Utils" stellen Tools für Spectrum-Scale zum Prüfen der 
# DNS-Namensauflösung bereit (nslookup)
    - name: "Installiere bind-utils-9.11.4-16.P2.el7.x86_64"
      yum:
        name: bind-utils-9.11.4-16.P2.el7.x86_64
        state: present

# Die "NFS-Utils" stellen den NFS-Client bereit, um das Spectrum-Scale-Image 
# vom NFS-Server auf die Nodes zu kopieren
    - name: "Installiere NFS-UTILS"
      yum:
        name: nfs-utils.x86_64
        state: present

# Die Netzwerktools stellen einige nützliche Analyse-Werkzeuge bereit
    - name: "Installiere net-tools"
      yum:
        name: net-tools
        state: present

# Wir benötigen einen Funktionieren NTP-Dienst
    - name: "Installiere ntp.x86_64"
      yum:
        name: ntp.x86_64
        state: present
    - name: "Installiere ntpdate.x86_64"
      yum:
        name: ntpdate.x86_64
        state: present

# C-Plus-Plus wird benötigt
    - name: "Installiere cpp.x86_64"
      yum:
        name: cpp.x86_64
        state: present

# Der GNU-Compiler wird benötigt
    - name: "Installiere gcc.x86_64"
      yum:
        name: gcc.x86_64
        state: present

# Der GNU-Compiler für C-Plus-Plus wird benötigt
    - name: "Installiere gcc-c++.x86_64"
      yum:
        name: gcc-c++.x86_64
        state: present

# Es wird geprüft, ob das Spectrum-Scale-TAR-GZ-File mit ca. 1,9GB schon 
# vorhanden ist. Sollte es vorhanden sein, wird die Variable mit dem Wert
# "exists" gefüllt und alle weiteren Tasks mit den 
# WHEN-Bedingung (not folder_details.stat.exists) werden übersprungen
    - name: "Check if Folder exists"
      stat:
        path: "{{ entpack_dir }}"
      register: folder_details

    - name: "DEBUG"
      debug:
        msg: "{{ folder_details }}"

# Andernfalls erstelle ein Arbeitsverzeichnis (samt Unterverzeichnissen, wie 
# in der Variable $entpack_dir angegeben)
    - name: "Spectrum-Scale-Entpack-Verzeichnis erstellen"
      file:
        recurse: true
        path: "{{ item }}"
        state: "directory"
      with_items:
        - "{{ entpack_dir }}"
        - "{{ sps_filesystem1 }}"

# Prüfe, ob das 1,9GB große TAR-GZ-File bereits auf dem SPS-Node vorhanden ist.
# Wenn ja, überspringe den Kopiervorgang.
    - name: "Check if TAR-File exists on Remote-Machine in Entpack_Directory"
      stat:
        path: "{{ entpack_dir }}{{ entpack_tar_file }}"
      register: tar_details

    - name: "DEBUG"
      debug:
        msg: "{{ tar_details }}"

# Existiert das File noch nicht, wird der Pfad auf dem NFS-Server gemounted, 
# wo das File zu finden ist
    - name: "Mounting NFS-Share"
      mount:
        fstype: nfs
        opts: defaults
        state: mounted
        src: "{{ src_nas_mount }}"
        path: "{{ dest_nas_mount_path }}"
        backup: yes
      when:
        - not tar_details.stat.exists

# Warte eine Sekunde (dies ist ein Sicherheitspuffer, damit NFS Zeit hat, den 
# Mount bereitzustellen)
    - name: "Wait a Second..."
      wait_for:
        timeout: 1

# Existiert das TAR-GZ-File noch nicht, wird es jetzt vom NFS auf den 
# Spectrum-Scale-Node kopiert. Dieser Kopiervorgang finde nur zwischen 
# SPS-Node und NFS-Server statt. Das File wird nicht vorher auf den 
# Control-Node geladen
    - name: "Copy TAR-File from NFS-Servers to SPS-Node"
      copy:
        src: "{{ dest_nas_mount_path }}/spectrumscale/{{ entpack_tar_file }}"
        dest: "{{ entpack_dir }}"
        remote_src: yes
      when:
        - not tar_details.stat.exists

# Abhängen des NFS-Mounts. Dieser wird nicht weiter benötigt.
    - name: "Unmounting NFS-Share"
      mount:
        fstype: nfs
        opts: defaults
        state: absent
        src: "{{ src_nas_mount }}"
        path: "{{ dest_nas_mount_path }}"
        backup: yes
      when:
        - not tar_details.stat.exists

# Prüfe, ob das 1,9GB große TAR-GZ-File bereits auf dem SPS-Node vorhanden ist. 
# Wenn ja, überspringe den Kopiervorgang.
    - name: "Check if TAR-File exists on Remote-Machine after Copy"
      stat:
        path: "{{ entpack_dir }}{{ entpack_tar_file }}"
      register: tar_after_copy_details

# Entpacke das TAR-GZ-File in den Entpack-Ordner
    - name: "Entpacke Tar-File"
      unarchive:
        src: "{{ entpack_dir }}{{ entpack_tar_file }}"
        dest: "{{ entpack_dir }}"
        remote_src: yes
      when:
        - tar_after_copy_details.stat.exists

    - name: "Copy private SSH-Key from TERRAFORM-Host to SPS-Nodes"
      copy:
        src: ~/.ssh/id_rsa
        dest: /root/.ssh/
        mode: 0600
    - name: "Copy public SSH-Key from TERRAFORM-Host to SPS-Nodes"
      copy:
        src: ~/.ssh/id_rsa.pub
        dest: /root/.ssh/
        mode: 0600

    - name: "Create Known-Hosts"
      known_hosts:
        path: /root/.ssh/known_hosts
        state: present
        name: terraform-master.local
        key: "terraform-master.local ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/8D/97nylP7SmfLwqqQguoT6NAAhA667vto++4M3hSWOF65KDh3vogvy8KPMc6//YpvkH4tZuGP1Y01vsJedZDK5ZR4S0XxdKf4i6N49+0d7syCzveEWieWQws/yplyU/Fko/msWuWMGiE3O6euLdv75EMd7LSBWTe6vyy9wX9k19oP2krNVuCbTOn8ZTB6tpgXrRrGVuScTAyH1F85Ogv4r5E4tDh0/XSXRQk+tYFPvSUxSK4Dnju8IKbkVqDeeAq7S5USETmpLY5DWAa6yjhaMorMOS8UopJnvaMi0d1oKzUG5ttITLllOTCObn6iYq/O6pVJMFYVgJxOvxOLIr"

###
    - name: "Copy Kernel Devel"
      copy:
        src: "../dependencies/kernel-devel-3.10.0-1062.el7.x86_64.rpm"
        dest: "{{ entpack_dir }}/kernel-devel-3.10.0-1062.el7.x86_64.rpm"
    - name: "Copy Kernel Header"
      copy:
        src: "../dependencies/kernel-headers-3.10.0-1062.el7.x86_64.rpm"
        dest: "{{ entpack_dir }}/kernel-headers-3.10.0-1062.el7.x86_64.rpm"
    - name: "Install Kernel Devel"
      yum:
        name: "{{ entpack_dir }}/kernel-devel-3.10.0-1062.el7.x86_64.rpm"
        allow_downgrade: yes
        state: present
    - name: "Install Kernel Header"
      yum:
        name: "{{ entpack_dir }}/kernel-headers-3.10.0-1062.el7.x86_64.rpm"
        allow_downgrade: yes
        state: present
    - name: "Copy Known_hosts-Datei"
      copy:
        src: "/root/.ssh/known_hosts"
        dest: "/root/.ssh/known_hosts"
    - name: "Remove EPEL-Release-Repo"
      yum:
        name: epel-release.noarch
        state: absent
    - name: "Stop and disable firewalld"
      service:
        name: firewalld
        state: stopped
        enabled: false

    - name: "Execute spectrum-scale-raw-commands"
      raw: "{{ item }}"
      #raw: "spectrumscale nsd add -p {{ sps_node1 }} /dev/sdb -fs gpfs"
        
      with_items:
        - "{{ spectrumscale_cmd }} nsd add -p {{ sps_node1 }} /dev/sdb -fs gpfs"
        - "{{ spectrumscale_cmd }} nsd add -p {{ sps_node2 }} /dev/sdb -fs gpfs"
        - "{{ spectrumscale_cmd }} nsd add -p {{ sps_node3 }} /dev/sdb -fs gpfs"
        - "{{ spectrumscale_cmd }} config gpfs -c sps.home.local"
        - "{{ spectrumscale_cmd }} config ntp -e on -s 10.0.249.1"
        - "{{ spectrumscale_cmd }} config gpfs -e 60000-61000"
        - "{{ spectrumscale_cmd }} callhome disable"
        - "{{ spectrumscale_cmd }} config protocols -f gpfs -m {{ sps_filesystem1 }}"
        - "{{ spectrumscale_cmd }} config protocols -f patrick -m /home/gpfs/test/"
        - "{{ spectrumscale_cmd }} config protocols -e 10.0.249.245"
        - "{{ spectrumscale_cmd }} enable smb nfs"
        - "{{ spectrumscale_cmd }} config protocols -l"
        - "{{ spectrumscale_cmd }} node add sps1.home.local -amnpq"
        - "{{ spectrumscale_cmd }} node add sps2.home.local -amnpq"
        - "{{ spectrumscale_cmd }} node add sps3.home.local -amnpqg"

#        - "{{ spectrumscale_cmd }} node list"
#        - "{{ spectrumscale_cmd }} nsd list"
      when: "'sps1' in inventory_hostname"

### --- END ANSIBLE-SKRIPT --- ###
