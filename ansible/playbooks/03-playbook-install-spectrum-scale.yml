---
# RUNs on all SPS-NODES
#
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Install Requirement for Spectrum-Scale"
  hosts: spectrumscale
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:

# Install Software packages
    - name: "02 - Install necassary software programs"
      become: "true"
      yum:
        name:
          - bind-utils
          - nfs-utils
          - net-tools
          - chrony
          - cpp
          - gcc
          - gcc-c++
          - python3
          - elfutils
          - elfutils-devel
        state: "present"

# Check Prerequisites 
    - name: "03 - Check if folder {{ dir_root }} exists"
      stat:
        path: "{{ dir_root }}"
      register: folder_details

# Create Directories
    - name: "04 - Create Directoy {{ dir_root }}"
      file:
        recurse: "true"
        path: "{{ item }}"
        state: "directory"
      with_items:
        - "{{ dir_root }}"
        - "{{ sps_mountpoint_fs1 }}"
      when:
        - not folder_details.stat.exists
    
# Create Spectrum-Scale Directory
    - name: "05 - Create Spectrum-Scale-Mountpoint-Directory"
      file:
        recurse: "true"
        path: "{{ item }}"
        state: "directory"
      with_items:
        - "{{ dest_nas_mount_path }}"

# Check if tar-file was already copied
    - name: "06 - Check if {{ dir_root }}{{ sps_install_filename }} exists on Remote-Machine in dir_rootectory"
      stat:
        path: "{{ dir_root }}{{ sps_install_filename }}"
      register: tar_details

    # - name: "DEBUG"
    #   debug:
    #     msg: "{{ tar_details }}"

# Copy sps_install_filename from control-node to managed-nodes
    - name: "07 - Copy {{sps_install_filename}} from control-node to managed-hosts"
      copy:
        src: "{{dir_root}}{{sps_install_filename}}"
        dest: "{{dir_root}}{{sps_install_filename}}"
        mode: "0755"
      when:
        - not tar_details.stat.exists

# the epel-release must be removed for sps-prerequisites
    - name: "12 - Remove EPEL-Release-Repo"
      yum:
        name: "epel-release.noarch"
        state: "absent"

# Disable firewall for easier setup
    - name: "13 - Stop and disable firewalld"
      service:
        name: firewalld
        state: stopped
        enabled: "false"

# Execute the install-file to install the sps-dependencies
    - name: "14 - Execute SpectrumScale Install-File to extract gpfs-binaries, rpm-files, etc."
      raw: "{{ item }}"
      with_items:
        - "echo '1' | {{ dir_root }}{{ sps_install_filename }}"

# Install GPFS-Packages  
    - name: "15 - Install GPFS-RPM-Packages"
      yum:
        name:
          - "{{gpfs_base}}"
          - "{{gpfs_gskit}}"
          - "{{gpfs_license}}"
          - "{{gpfs_java}}"
          - "{{gpfs_gpl}}"
          - "{{gpfs_docs}}"
          - "{{gpfs_pmsensors}}"
          - "{{gpfs_pmcollector}}"
          - "{{gpfs_msg}}"
          - "{{gpfs_compression}}"
        state: "present"
        disable_gpg_check: "yes"
      tags:
        - rpms


# Add PATH to bash_profile to execute GPFS-Commands from everywhere
    - name: "16 - Add Path {{gpfs_binary_path}} to bash_profile"
      lineinfile: 
        path: "/root/.bash_profile"
        regexp: "^PATH="
        line: "PATH=$PATH:$HOME/bin:{{gpfs_binary_path}}"
        state: "present"
      tags:
        - bash

# Building the GPFS portability layer on Linux nodes using mmbuildgpl 
    - name: "17 - Build the GPFS-Portability-Layer with mmbuildgpl"
      raw: "{{gpfs_binary_path}}mmbuildgpl"
      tags:
        - gpl

# Disable the rpcbind-service and socket
    - name: "18 - Disable rpcbind-service as prereq from SPS"
      service:
        name: "rpcbind"
        enabled: "false"
        state: "stopped"
      tags:
        - retry

    - name: "19 - Disable rpcbind-socket as prereq from SPS"
      service:
        name: "rpcbind.socket"
        enabled: "false"
        state: "stopped"
      tags:
        - retry


### Next PLAY # Execute only on Spectrum-Scale-GUI-Node
#
# ONLY on GUI-NODE
#
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Configure Spectrum-Scale GUI-Node"
  hosts: "{{ sps.sps3.fqdn }}"
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:
# Install GUI-Packages
    - name: "20 - Install GPFS-RPM-Packages for GUI-Node"
      yum:
        name:
          - "{{gpfs_gui}}"
        state: "present"
        disable_gpg_check: "yes"
      tags:
        - rpms

# Starten der GUI
    - name: "21 - Start the GPFS-GUI on {{ sps.sps3.fqdn }}"
      raw: "systemctl start gpfsgui"

# Wait 60 Seconds
    - name: "Wait 60 Seconds...for starting up GUI"
      wait_for:
        timeout: 60


# Execute only on Spectrum-Scale-Node1
#
# ONLY on NODE1
#
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Configure Spectrum-Scale Filesystem"
  hosts: "{{ sps.sps1.fqdn }}"
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:
# Create the cluster
    - name: "24 - Create the Cluster with mmcrcluster"
      raw: "{{gpfs_binary_path}}mmcrcluster -N {{sps.sps1.fqdn}}:manager-quorum:{{sps.sps1.hostname}},{{sps.sps2.fqdn}}:manager:{{sps.sps2.hostname}},{{sps.sps3.fqdn}}:manager:{{sps.sps3.hostname}} -C {{sps_cluster_name}}"
      # when: "'{{ sps.sps1.fqdn }}' in inventory_hostname"

# Assign license to Nodes
    - name: "25 - Assign license with mmchlicense"
      raw: "{{gpfs_binary_path}}mmchlicense server --accept -N {{sps.sps1.fqdn}},{{sps.sps2.fqdn}},{{sps.sps3.fqdn}}"
      # when: "'{{ sps.sps1.fqdn }}' in inventory_hostname"

# Execute on all SpectrumScale-Nodes
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Start Spectrum-Scale Filesystem"
  hosts: "spectrumscale"
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:     
# Starten des GPFS-CLusters on all nodes
    - name: "26 - Start the GPFS-Cluster on all nodes with mmstartup"
      raw: "{{gpfs_binary_path}}mmstartup"

# Wait 60 Seconds
    - name: "Wait 60 Seconds...for starting up GPFS on all nodes"
      wait_for:
        timeout: 60


# Execute on only on one node Node
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Configure the Spectrum-Scale Filesystem"
  hosts: "{{ sps.sps1.fqdn }}"
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:

# Create Stanza File from template
    - name: "27 - Create Stanza-File from template"
      template:
        src: "../configs/StanzaFile.j2"
        dest: "{{dir_root}}StanzaFile"
        mode: "0644"

# Wait 5 Seconds
    - name: "Wait 5 Seconds..."
      wait_for:
        timeout: 5

# Create NSDs for Cluster from Stanza File
    - name: "28 - Create NSDs for the Cluster with mmcrnsd"
      raw: "{{gpfs_binary_path}}mmcrnsd -F {{dir_root}}StanzaFile"

# Wait 30 Seconds
    - name: "Wait a Minute...for becoming nsds ready on all nodes"
      wait_for:
        timeout: 60

# Create Filesystem
    - name: "29 - Create Filesystem for the Cluster with mmcrfs"
      raw: "{{gpfs_binary_path}}mmcrfs {{sps_filesystem_fs1}} -F {{dir_root}}StanzaFile -A yes -B 2M -j scatter -L 128M -n 2 -S relatime -r 2 -m 2 -T {{sps_mountpoint_fs1}} -Q yes --filesetdf --perfileset-quota --inode-limit 2M:100K --version {{sps_filesystem_version}}"
      tags:
        - createfs

# Wait 10 Seconds
    - name: "Wait 10 Seconds..."
      wait_for:
        timeout: 10

# Mount Filesystems
    - name: "30 - Mount Filesystems"
      raw: "{{gpfs_binary_path}}mmmount all -N {{sps.sps1.fqdn}},{{sps.sps2.fqdn}},{{sps.sps3.fqdn}}"

# Configure the Quota
    - name: "31 - Configure Quota"
      raw: "{{gpfs_binary_path}}mmchfs {{sps_filesystem_fs1}} -Q yes"

# Configure the enforceFilesetQuotaOnRoot
    - name: "32 - Configure enforceFilesetQuotaOnRoot"
      raw: "{{gpfs_binary_path}}mmchconfig enforceFilesetQuotaOnRoot=yes -i"

# Configure the controlSetxattrImmutableSELinux
    - name: "33 - Configure controlSetxattrImmutableSELinux"
      raw: "{{gpfs_binary_path}}mmchconfig controlSetxattrImmutableSELinux=yes -i"

# Configure the --filesetdf
    - name: "34 - Configure --filesetdf"
      raw: "{{gpfs_binary_path}}mmchfs {{sps_filesystem_fs1}} --filesetdf"


# Execute on only on one node Node
- name: "{{ lookup('pipe','date \"+%Y-%m-%d %H-%M-%S\"') }} | Playbook Configure GUI"
  hosts: "{{ sps.sps3.fqdn }}"
  vars_files:
    - "../vars/vars.yaml"
  gather_facts: false
  tasks:

# Enable the pmcollector and pmsensor
    - name: "22 - Enable the pmcollectors and pmsensors"
      raw: "{{gpfs_binary_path}}mmperfmon config generate --collectors {{sps.sps1.fqdn}},{{sps.sps2.fqdn}},{{sps.sps3.fqdn}}"

# Initialize the performance collection 
    - name: "23 - Initialize the performance collection"
      raw: "{{gpfs_binary_path}}mmchnode --perfmon -N {{sps.sps1.fqdn}},{{sps.sps2.fqdn}},{{sps.sps3.fqdn}}"

